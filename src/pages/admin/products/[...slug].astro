---
import ProductImage from '@/components/products/ProductImage.astro';
import ProductSlideshow from '@/components/products/ProductSlideshow.astro';
import MainLayout from '@/layouts/MainLayout.astro';
import { actions } from 'astro:actions';

const url = Astro.url;
const pageParam = url.searchParams.get('slug') || '';

const { data, error } = await Astro.callAction(actions.getProductBySlug, {
  slug: pageParam,
});

if (error) {
  console.error(error);
}


const { product, images } = data!;
const imagesList = images?.map((image) => image.image);

---

<MainLayout title='Mantenimiento de producto'>
  <!-- <h1>{product.title}</h1> -->
  <a href='/admin/dashboard' class='text-blue-500'>← Volver</a>

  <div
    class='bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative my-8 hidden'
    role='alert'
    id='alert-msg'
  >
    <strong class='font-bold'>Holy smokes!</strong>
    <span class='block sm:inline'>Something seriously bad happened.</span>
    <span class='absolute top-0 bottom-0 right-0 px-4 py-3'>
      <svg
        class='fill-current h-6 w-6 text-red-500'
        role='button'
        xmlns='http://www.w3.org/2000/svg'
        viewBox='0 0 20 20'
        ><title>Close</title><path
          d='M14.348 14.849a1.2 1.2 0 0 1-1.697 0L10 11.819l-2.651 3.029a1.2 1.2 0 1 1-1.697-1.697l2.758-3.15-2.759-3.152a1.2 1.2 0 1 1 1.697-1.697L10 8.183l2.651-3.031a1.2 1.2 0 1 1 1.697 1.697l-2.758 3.152 2.758 3.15a1.2 1.2 0 0 1 0 1.698z'
        ></path></svg
      >
    </span>
  </div>

  <form class='grid grid-cols-1 sm:grid-cols-2 gap-4'>
    <!-- Datos generales -->
    <div class='mt-2'>
      <h2 class='text-lg font-semibold'>Datos generales</h2>

      <input type='hidden' id='id' name='id' value={product.id} />

      <!-- Titulo -->
      <div class='mb-4'>
        <label for='title' class='block'>Título</label>
        <input
          type='text'
          id='title'
          name='title'
          placeholder='Producto nuevo'
          value={product.title}
          class='w-full p-2 border border-gray-300 rounded'
        />
      </div>

      <!-- Slug -->
      <div class='mb-4'>
        <label for='slug' class='block'>Slug</label>
        <input
          type='text'
          id='slug'
          name='slug'
          placeholder='slug-nuevo'
          value={product.slug}
          class='w-full p-2 border border-gray-300 rounded'
        />
      </div>

      <!-- Descripción -->
      <div class='mb-4'>
        <label for='description' class='block'>Descripción</label>
        <textarea
          id='description'
          name='description'
          class='w-full p-2 border border-gray-300 rounded'
          placeholder='Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.'
          rows='8'>{product.description}</textarea
        >
      </div>

      <div class='grid grid-cols-1 sm:grid-cols-2 gap-5'>
        <!-- Precio -->
        <div class='mb-4'>
          <label for='price' class='block'>Precio</label>
          <input
            type='number'
            id='price'
            name='price'
            value={product.price}
            class='w-full p-2 border border-gray-300 rounded'
          />
        </div>

        <!-- Inventario -->
        <div class='mb-4'>
          <label for='stock' class='block'>Inventario</label>
          <input
            type='number'
            id='stock'
            name='stock'
            value={product.stock}
            class='w-full p-2 border border-gray-300 rounded'
          />
        </div>
      </div>

      <!-- Labels -->
      <div class='mb-4'>
        <label for='tags' class='block'
          >Etiquetas <small class='text-gray-500'>(Separado por comas)</small
          ></label
        >
        <input
          type='text'
          id='tags'
          name='tags'
          value={product.tags}
          placeholder='etiqueta-1, etiqueta-2, etiqueta-3'
          class='w-full p-2 border border-gray-300 rounded'
        />
      </div>

      <div class='grid grid-cols-2 gap-4'>
        <!-- Gender -->
        <div class='mb-4'>
          <label for='gender' class='block'>Sexo</label>
          <select
            class='w-full p-2 border border-gray-300 rounded'
            name='gender'
          >
            {JSON.stringify(product.gender)}
            <option value=''>[ Seleccione ]</option>
            {
              ['men', 'women', 'unisex', 'kid'].map((gender) => (
                <option
                  value={gender}
                  class='capitalize'
                  selected={gender === product.gender}
                >
                  {gender.toUpperCase()}
                </option>
              ))
            }
          </select>
        </div>

        <!-- Type -->
        <div class='mb-4'>
          <label for='tags' class='block'>Tipo</label>
          <select class='w-full p-2 border border-gray-300 rounded' name='type'>
            <option value=''>[ Seleccione ]</option>
            {
              ['shirts', 'shirt', 'pants', 'hats', 'hoodies'].map((type) => (
                <option
                  value={type}
                  class='capitalize'
                  selected={type === product.type}
                >
                  {type.toUpperCase()}
                </option>
              ))
            }
          </select>
        </div>
      </div>

      <!-- Tallas -->
      <div class='mb-4'>
        <label for='sizes' class='block'>Tallas</label>
        <div class='flex'>
          {
            ['XS', 'S', 'M', 'L', 'XL', 'XXL'].map((size) => (
              <button
                type='button'
                class='btn-size'
                onclick="this.classList.toggle('active')"
                class:list={product.sizes.includes(size) ? 'active' : ''}
              >
                {size}
              </button>
            ))
          }
        </div>
      </div>
    </div>

    <!-- Imagenes -->
    <div>
      <!-- File upload -->
      <div class='mt-4'>
        <!-- Guardar  -->
        <div class='flex justify-end'>
          <button class='bg-blue-500 mb-5 p-2 rounded text-white'
            >Guardar producto</button
          >
        </div>

        <!-- File input -->
        <div class='flex items-center justify-center w-full'>
          <label
            for='file-upload'
            class='flex flex-col items-center justify-center w-full h-52 border-2 border-dashed border-gray-300 rounded-lg cursor-pointer hover:bg-gray-100'
            id='drop-zone'
          >
            <div class='flex flex-col items-center justify-center pt-5 pb-6'>
              <svg
                class='w-8 h-8 mb-4 text-gray-500'
                fill='none'
                stroke='currentColor'
                viewBox='0 0 24 24'
                xmlns='http://www.w3.org/2000/svg'
              >
                <path
                  stroke-linecap='round'
                  stroke-linejoin='round'
                  stroke-width='2'
                  d='M7 16V4a2 2 0 012-2h6a2 2 0 012 2v12m-6 4l-4-4m0 0l4-4m-4 4h12'
                ></path>
              </svg>
              <p class='mb-2 text-sm text-gray-500' id='lbl-selected-files'>
                <span class='font-semibold'>Click aquí </span> o arrastra los archivos
              </p>
              <p class='text-xs text-gray-500'>
                SVG, PNG, JPG or GIF (max. 800x400px)
              </p>
            </div>

            <!-- class="hidden" -->
            <!-- accept only images -->
            <input
              id='file-upload'
              name='imageFiles'
              type='file'
              accept='image/*'
              multiple
            />
          </label>
        </div>

        <!-- Slideshow -->
        
        {
          imagesList?.length! > 0 && (
            <ProductSlideshow images={imagesList!.join(',')} />
          )
        }
        <table class='w-full border mt-10'>
          <thead>
            <tr>
              <th>Imagen</th>
              <th>Eliminar</th>
            </tr>
          </thead>
          <tbody>
            {
              images?.map((image) => (
                <tr class='border' id={image.id}>
                  <td class='flex justify-center'>
                    <ProductImage
                      src={image.image}
                      alt={product.title}
                      className='w-16 h-16 rounded'
                    />
                  </td>
                  <td class='text-center'>
                    <button type="button" data-id={image.id} class='btn-delete-image'>X</button>
                  </td>
                </tr>
              ))
            }
          </tbody>
        </table>
      </div>
    </div>
  </form>

  <style>
    .btn-size,
    .btn-delete-image {
      @apply rounded border cursor-pointer border-gray-300 w-10 h-10 mr-4 hover:bg-blue-300 hover:text-white transition-all;
    }

    .active {
      @apply bg-blue-500 text-white;
    }
  </style>
</MainLayout>

<script>
  import { actions } from 'astro:actions';
  import { navigate } from 'astro:transitions/client';
import type { DragEvent } from 'react';

  document.addEventListener('astro:page-load', () => {
    const form = document.querySelector('form');
    const sizeButtons = document.querySelectorAll('.btn-size');
    const btnDeleteImage = document.querySelectorAll('.btn-delete-image');
    
    const lblSelectedFiles = document.querySelector('#lbl-selected-files') as HTMLParagraphElement;
    const dropZone = document.querySelector('#drop-zone') as HTMLLabelElement;
    const fileInput = document.querySelector('#file-upload') as HTMLInputElement;

    form?.addEventListener('submit', async (e) => {
      e.preventDefault();

      const selectedSizdes = Array.from(sizeButtons)
        .filter((button) => button.classList.contains('active'))
        .map((button) => button.textContent?.trim())
        .join(',');

      
      const formData = new FormData(form);
      formData.append('sizes', selectedSizdes);
      
      const alertMessage = document.querySelector('#alert-msg');
      
      alertMessage?.addEventListener('click', () => {
        alertMessage?.classList.add('hidden');
      });

      const { data, error } = await actions.createUpdateProduct(formData);

      if (error) {
        alertMessage?.classList.remove('hidden');
      }

      if (data) {
        navigate(`/admin/products/?slug=${data.slug}`);
      }
    });


    btnDeleteImage.forEach((btn) => {
      btn.addEventListener('click', async (e) => {
        const id = btn.getAttribute('data-id');

        if(!id) return

        const { error } = await actions.deleteProductImage(id);

        if(error) {
          console.log(error);
          return;
        }

        // const trId = `#${id}`;
        const trId = `#${CSS.escape(id)}`;
        const test = document.querySelector(trId)?.remove()

      });
    });

    const preventDefaults = (e:Event) => {
      e.preventDefault();
      e.stopPropagation();
    };

    const highlight = (e: Event) => {
      dropZone.classList.add('border-blue-500', 'bg-blue-50');
    };

    const unhighlight = (e: Event) => {
      dropZone.classList.remove('border-blue-500', 'bg-blue-50');
    };


    (['dragenter', 'dragover', 'dragleave', 'drop'] as const).forEach((eventName) => {
      dropZone.addEventListener(eventName, preventDefaults);
      document.body.addEventListener(eventName, preventDefaults);
    });

    (['dragenter', 'dragover'] as const).forEach(
      eventName => {
        dropZone.addEventListener(eventName, highlight)
      }
    );

    (['dragleave', 'drop'] as const).forEach(
      eventName => {
        dropZone.addEventListener(eventName, unhighlight)
      }
    );

  });
</script>
